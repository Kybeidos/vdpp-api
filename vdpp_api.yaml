openapi: 3.0.0
info:
  version: '1.0.0'
  title: 'VDPP Fachliche Schnittstelle'
  description: 'TBD'
servers:
  - description: Kybeidos-intern
    url: http://hw05.kybeidos.de:8083
#security:
#  - OAuth2:
#      - read
#      - write
paths:
#  /authentication:
#    post:
#      tags:
#        - authentication
#        - clientApi
#        - notImplemented
#      summary: Authenticates a user
#      operationId: postAuthentication
#      description: Authenticates a user
##      security:
##        - OAuth2: []
#      parameters:
#        - in: header
#          name: Authorization
#          schema:
#            type: string
#            example: 'Basic KV1QiLCJhbGciOiJIUzI1NiJ9ey'
#      responses:
#        '200':
#          description: 'Ok; authentication successful, the body contains the authorization token'
#          content:
#            text/plain:
#              schema:
#                type: string
#                example: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9eyJzdWIiOjEwMDAsI'
#                format: byte
#        '403':
#          description: 'Forbidden; invalid credentials'
#  /users:
#    get:
#      tags:
#        - user
#      summary: Returns an overview of all users
#      operationId: getUsers
#      description: |
#        Returns an overview of all users.
##      security:
##        - OAuth2: [admin]
#      responses:
#        '200':
#          description: 'Ok; the body contains links to all users'
#          content:
#            application/json:
#              schema:
#                type: array
#                items:
#                  $ref: '#/components/schemas/User'
#        '401':
#          description: 'Unauthorized; you must supply an authorization token'
#        '403':
#          description: 'Forbidden; insufficient permissions'
#    post:
#      tags:
#        - user
#      summary: Create/register a user
#      operationId: postUser
#      description: | #TODO: Implement email-verified registration
#        Creates/registers a user. The registration will fail if a user with the given username (in the request body)
#        already exists. If a new user is created, the user will be sent a confirmation email to complete their
#        registration. Upon registration, users authenticate themselves and are thus valid to use other features
#        of the API.
##      security:
##        - OAuth2: [write] #TODO: Check whether we want authentication for user registration
#      requestBody:
#        required: true
#        content:
#          application/json:
#            schema:
#              $ref: '#/components/schemas/User'
#      responses:
#        '200':
#          description: 'Created; user created'
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/User'
#        '400':
#          description: 'Bad request; the input is malformed or the user already exists'
#          content:
#            text/plain:
#              schema:
#                type: string
#                description: 'The error message with the exact cause'
#        '401':
#          description: 'Unauthorized; you must supply an authorization token'
#        '403':
#          description: 'Forbidden; insufficient permissions'
#  /users/{uuid}:
#    get:
#      tags:
#        - user
#      summary: Returns a specific user
#      operationId: getUser
#      description: |
#        Returns information about a specific user. A non-admin user cannot request information about other users.
##      security:
##        - OAuth2: [read, admin]
#      parameters:
#        - in: path
#          name: uuid
#          description: 'the identifier of the user'
#          required: true
#          schema:
#            $ref: '#/components/schemas/User/properties/uuid'
#      responses:
#        '200':
#          description: 'Ok; the body contains information about the user'
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/User'
#        '401':
#          description: 'Unauthorized; you must supply an authorization token'
#        '403':
#          description: 'Forbidden; insufficient permissions'
#        '404':
#          description: 'Not found; the user does not exist'
#    put:
#      tags:
#        - user
#      summary: Create or replace information about a specific user
#      operationId: putUser
#      description: |
#        Creates or replaces information of a specific user. A non-admin user cannot update other users. A user cannot
#        invalidate required fields.
##      security:
##        - OAuth2: [write, admin]
#      parameters:
#        - in: path
#          name: uuid
#          description: 'the identifier of the user'
#          required: true
#          schema:
#            $ref: '#/components/schemas/User/properties/uuid'
#      requestBody:
#        required: true
#        content:
#          application/json:
#            schema:
#              $ref: '#/components/schemas/User'
#      responses:
#        '200':
#          description: 'Ok; the body contains the updated information about the user'
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/User'
#        '400':
#          description: 'Bad request; the input is malformed or would invalidate required fields'
#          content:
#            text/plain:
#              schema:
#                type: string
#                description: 'The error message with the exact cause'
#        '401':
#          description: 'Unauthorized; you must supply an authorization token'
#        '403':
#          description: 'Forbidden; insufficient permissions'
#    patch:
#      tags:
#        - user
#      summary: Upserts information about a specific user
#      operationId: patchUser
#      description: |
#        Upserts information about a specific user. Users may update their own user profile, updating other users
#        requires admin permissions. Users may not invalidate required fields.
##      security:
##        - OAuth2: [write, admin]
#      parameters:
#        - in: path
#          name: uuid
#          description: 'the identifier of the user'
#          required: true
#          schema:
#            $ref: '#/components/schemas/User/properties/uuid'
#      requestBody:
#        required: true
#        description: 'New fields will be inserted. Omitted fields will not be changed.'
#        content:
#          application/json:
#            schema:
#              $ref: '#/components/schemas/User'
#      responses:
#        '200':
#          description: 'Ok; the body contains the updated information about the user'
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/User'
#        '400':
#          description: 'Bad request; the input is malformed or required fields have been invalidated'
#          content:
#            text/plain:
#              schema:
#                type: string
#                description: 'The error message with the exact cause'
#        '401':
#          description: 'Unauthorized; you must supply an authorization token'
#        '403':
#          description: 'Forbidden; insufficient permissions'
#    delete:
#      tags:
#        - user
#      summary: Delete a specific user #TODO: Maybe users may delete themselves?
#      operationId: deleteUser
#      description: |
#        Delete a specific user.
##      security:
##        - OAuth2: [admin]
#      parameters:
#        - in: path
#          name: uuid
#          description: 'the identifier of the user'
#          required: true
#          schema:
#            $ref: '#/components/schemas/User/properties/uuid'
#      responses:
#        '200':
#          description: 'Ok; the user was successfully deleted'
#        '401':
#          description: 'Unauthorized; you must supply an authorization token'
#        '403':
#          description: 'Forbidden; insufficient permissions'
#        '404':
#          description: 'Not found; the user does not exist'
  /documents:
    get:
      tags:
        - document
        - clientApi
      summary: Returns an overview of all documents the user has access to.
      operationId: getDocuments
      description: |
        Returns an overview of all documents the user has access to. The stress is on "access" here, because this
        request also returns documents of other users the requesting user can access with at least read permissions.
#      security:
#        - OAuth2: [read, admin]
      responses:
        '200':
          description: 'Ok; the body contains all documents the user has access to'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Document'
        '401':
          description: 'Unauthorized; you must supply an authorization token'
        '403':
          description: 'Forbidden; insufficient permissions'
    post:
      tags:
        - document
        - clientApi
      summary: Create one or more documents
      operationId: postDocuments
      description: |
        Creates one or more documents.
#      security:
#        - OAuth2: [write]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                files:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        '200':
          description: 'Created; documents created'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Document'
        '400':
          description: 'Bad request; the documents contains invalid fields, the body describes which'
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: 'Unauthorized; you must supply an authorization token'
        '403':
          description: 'Forbidden; insufficient permissions'
  /documents/{uuid}:
    get:
      tags:
        - document
        - clientApi
      summary: Returns information about the specified document
      operationId: getDocument
      description: |
        Returns information about the specified document.
#      security:
#        - OAuth2: [read, admin]
      parameters:
        - in: path
          name: uuid
          description: 'the identifier of the document'
          required: true
          schema:
           $ref: '#/components/schemas/Document/properties/uuid'
      responses:
        '200':
          description: 'Ok; the body contains information about the document'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        '401':
          description: 'Unauthorized; you must supply an authorization token'
        '403':
          description: 'Forbidden; insufficient permissions'
        '404':
          description: 'Not found; the document does not exist'
#    put:
#      tags:
#        - document
#        - clientApi
#      summary: Creates or replaces a specific document
#      operationId: putDocument
#      description: |
#        Creates or replaces a specific document.
##      security:
##        - OAuth2: [write, admin]
#      parameters:
#        - in: path
#          name: uuid
#          description: 'the identifier of the document'
#          required: true
#          schema:
#            $ref: '#/components/schemas/Document/properties/uuid'
#      requestBody:
#        required: true
#        content:
#          application/json:
#            schema:
#              $ref: '#/components/schemas/Document'
#      responses:
#        '200':
#          description: 'Ok; the document was updated and the body contains the updated document'
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/Document'
#        '400':
#          description: 'Bad request; the document contains invalid fields, the body describes which'
#          content:
#            text/plain:
#              schema:
#                type: string
#        '401':
#          description: 'Unauthorized; you must supply an authorization token'
#        '403':
#          description: 'Forbidden; insufficient permissions'
#    patch:
#      tags:
#        - document
#        - clientApi
#      summary: Upserts a specific document
#      operationId: patchDocument
#      description: |
#        Updates a specific document. If a document with the given path does not exist, an empty document (with
#        that path) will be created and updated with the patch contained in the request body.
##      security:
##        - OAuth2: [write, admin]
#      parameters:
#        - in: path
#          name: uuid
#          description: 'the identifier of the document'
#          required: true
#          schema:
#            $ref: '#/components/schemas/Document/properties/uuid'
#      requestBody:
#        required: true
#        description: 'New fields will be inserted. Omitted fields will not be affected by the patch.'
#        content:
#          application/json:
#            schema:
#              $ref: '#/components/schemas/Document'
#      responses:
#        '200':
#          description: 'Ok; the document was created or updated and the body contains the resulting document'
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/Document'
#        '400':
#          description: 'Bad request; the document contains invalid fields, the body describes which'
#          content:
#            text/plain:
#              schema:
#                type: string
#        '401':
#          description: 'Unauthorized; you must supply an authorization token'
#        '403':
#          description: 'Forbidden; insufficient permissions'
    delete:
      tags:
        - document
        - clientApi
      summary: Deletes a specific document
      operationId: deleteDocument
      description: |
        Deletes a specific document. Requires special permissions to delete the document of another user.
        # TODO: Delete actual document from file system too
#      security:
#        - OAuth2: [write, admin]
      parameters:
        - in: path
          name: uuid
          description: 'the identifier of the document'
          required: true
          schema:
            $ref: '#/components/schemas/Document/properties/uuid'
      responses:
        '200':
          description: 'Ok; the document was successfully deleted'
        '401':
          description: 'Unauthorized; you must supply an authorization token'
        '403':
          description: 'Forbidden; insufficient permissions'
        '404':
          description: 'Not found; the document does not exist'
  /domains:
    get:
      tags:
        - domain
        - clientApi
      summary: Returns an overview of all domains
      operationId: getDomains
      description: |
        Returns an overview of all domains the user has access to.
      #      security:
      #        - OAuth2: [read, admin]
      responses:
        '200':
          description: 'Ok; the body contains an array of domains'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Domain'
        '401':
          description: 'Unauthorized; you must supply an authorization token'
        '403':
          description: 'Forbidden; insufficient permissions'
    post:
      tags:
        - domain
        - clientApi
      summary: Create a domain
      operationId: postDomains
      description: |
        Creates a domain.
      #      security:
      #        - OAuth2: [write]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Domain'
      responses:
        '200':
          description: 'Created; domain created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Domain'
        '400':
          description: 'Bad request; the domain contains invalid fields, the body describes which'
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: 'Unauthorized; you must supply an authorization token'
        '403':
          description: 'Forbidden; insufficient permissions'
  /domains/{uuid}:
    get:
      tags:
        - domain
        - clientApi
      summary: Returns a specific domain
      operationId: getDomain
      description: |
        Returns information about a specific domain.
      #      security:
      #        - OAuth2: [read, admin]
      parameters:
        - in: path
          name: uuid
          description: 'the identifier of the domain'
          required: true
          schema:
            $ref: '#/components/schemas/Domain/properties/uuid'
      responses:
        '200':
          description: 'Ok; the body contains information about the domain'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Domain'
        '401':
          description: 'Unauthorized; you must supply an authorization token'
        '403':
          description: 'Forbidden; insufficient permissions'
        '404':
          description: 'Not found; the domain does not exist'
#    put:
#      tags:
#        - domain
#        - clientApi
#      summary: Create or replace information about a specific domain
#      operationId: putDomain
#      description: |
#        Creates or replaces information of a specific domain.
#      #      security:
#      #        - OAuth2: [write, admin]
#      parameters:
#        - in: path
#          name: uuid
#          description: 'the identifier of the domain'
#          required: true
#          schema:
#            $ref: '#/components/schemas/Domain/properties/uuid'
#      requestBody:
#        required: true
#        content:
#          application/json:
#            schema:
#              $ref: '#/components/schemas/Domain'
#      responses:
#        '200':
#          description: 'Ok; the body contains the updated information about the domain'
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/Domain'
#        '400':
#          description: 'Bad request; the input is malformed or would invalidate required fields'
#          content:
#            text/plain:
#              schema:
#                type: string
#                description: 'The error message with the exact cause'
#        '401':
#          description: 'Unauthorized; you must supply an authorization token'
#        '403':
#          description: 'Forbidden; insufficient permissions'
#    patch:
#      tags:
#        - domain
#        - clientApi
#      summary: Upserts information about a specific domain
#      operationId: patchDomain
#      description: |
#        Upserts information about a specific domain.
#      #      security:
#      #        - OAuth2: [write, admin]
#      parameters:
#        - in: path
#          name: uuid
#          description: 'the identifier of the domain'
#          required: true
#          schema:
#            $ref: '#/components/schemas/Domain/properties/uuid'
#      requestBody:
#        required: true
#        description: 'New fields will be inserted. Omitted fields will not be changed.'
#        content:
#          application/json:
#            schema:
#              $ref: '#/components/schemas/Domain'
#      responses:
#        '200':
#          description: 'Ok; the body contains the updated information about the domain'
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/Domain'
#        '400':
#          description: 'Bad request; the input is malformed or required fields have been invalidated'
#          content:
#            text/plain:
#              schema:
#                type: string
#                description: 'The error message with the exact cause'
#        '401':
#          description: 'Unauthorized; you must supply an authorization token'
#        '403':
#          description: 'Forbidden; insufficient permissions'
    delete:
      tags:
        - domain
        - clientApi
      summary: Delete a specific domain
      operationId: deleteDomain
      description: |
        Delete a specific domain.
      #      security:
      #        - OAuth2: [admin]
      parameters:
        - in: path
          name: uuid
          description: 'the identifier of the domain'
          required: true
          schema:
            $ref: '#/components/schemas/Domain/properties/uuid'
      responses:
        '200':
          description: 'Ok; the domain was successfully deleted'
        '401':
          description: 'Unauthorized; you must supply an authorization token'
        '403':
          description: 'Forbidden; insufficient permissions'
        '404':
          description: 'Not found; the domain does not exist'
#  /projects:
#    get:
#      tags:
#        - useCase
#        - clientApi
#      summary: Returns an overview of all projects
#      operationId: getProjects
#      description: |
#        Returns an overview of all projects the user has access to.
#      #      security:
#      #        - OAuth2: [read, admin]
#      responses:
#        '200':
#          description: 'Ok; the body contains an array of projects'
#          content:
#            application/json:
#              schema:
#                type: array
#                items:
#                  $ref: '#/components/schemas/Project'
#        '401':
#          description: 'Unauthorized; you must supply an authorization token'
#        '403':
#          description: 'Forbidden; insufficient permissions'
#    post:
#      tags:
#        - useCase
#        - clientApi
#      summary: Create a project
#      operationId: postProjects
#      description: |
#        Creates a project.
#      #      security:
#      #        - OAuth2: [write]
#      requestBody:
#        required: true
#        content:
#          application/json:
#            schema:
#              $ref: '#/components/schemas/Project'
#      responses:
#        '200':
#          description: 'Created; project created'
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/Project'
#        '400':
#          description: 'Bad request; the project contains invalid fields, the body describes which'
#          content:
#            text/plain:
#              schema:
#                type: string
#        '401':
#          description: 'Unauthorized; you must supply an authorization token'
#        '403':
#          description: 'Forbidden; insufficient permissions'
#  /projects/{uuid}:
#    get:
#      tags:
#        - useCase
#        - clientApi
#      summary: Returns a specific project
#      operationId: getProject
#      description: |
#        Returns information about a specific project.
#      #      security:
#      #        - OAuth2: [read, admin]
#      parameters:
#        - in: path
#          name: uuid
#          description: 'the identifier of the project'
#          required: true
#          schema:
#            $ref: '#/components/schemas/Project/properties/uuid'
#      responses:
#        '200':
#          description: 'Ok; the body contains information about the project'
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/Project'
#        '401':
#          description: 'Unauthorized; you must supply an authorization token'
#        '403':
#          description: 'Forbidden; insufficient permissions'
#        '404':
#          description: 'Not found; the project does not exist'
#    put:
#      tags:
#        - useCase
#        - clientApi
#      summary: Create or replace information about a specific project
#      operationId: putProject
#      description: |
#        Creates or replaces information of a specific project.
#      #      security:
#      #        - OAuth2: [write, admin]
#      parameters:
#        - in: path
#          name: uuid
#          description: 'the identifier of the project'
#          required: true
#          schema:
#            $ref: '#/components/schemas/Project/properties/uuid'
#      requestBody:
#        required: true
#        content:
#          application/json:
#            schema:
#              $ref: '#/components/schemas/Project'
#      responses:
#        '200':
#          description: 'Ok; the body contains the updated information about the project'
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/Project'
#        '400':
#          description: 'Bad request; the input is malformed or would invalidate required fields'
#          content:
#            text/plain:
#              schema:
#                type: string
#                description: 'The error message with the exact cause'
#        '401':
#          description: 'Unauthorized; you must supply an authorization token'
#        '403':
#          description: 'Forbidden; insufficient permissions'
#    patch:
#      tags:
#        - useCase
#        - clientApi
#      summary: Upserts information about a specific project
#      operationId: patchProject
#      description: |
#        Upserts information about a specific project.
#      #      security:
#      #        - OAuth2: [write, admin]
#      parameters:
#        - in: path
#          name: uuid
#          description: 'the identifier of the project'
#          required: true
#          schema:
#            $ref: '#/components/schemas/Project/properties/uuid'
#      requestBody:
#        required: true
#        description: 'New fields will be inserted. Omitted fields will not be changed.'
#        content:
#          application/json:
#            schema:
#              $ref: '#/components/schemas/Project'
#      responses:
#        '200':
#          description: 'Ok; the body contains the updated information about the project'
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/Project'
#        '400':
#          description: 'Bad request; the input is malformed or required fields have been invalidated'
#          content:
#            text/plain:
#              schema:
#                type: string
#                description: 'The error message with the exact cause'
#        '401':
#          description: 'Unauthorized; you must supply an authorization token'
#        '403':
#          description: 'Forbidden; insufficient permissions'
#    delete:
#      tags:
#        - useCase
#        - clientApi
#      summary: Delete a specific project
#      operationId: deleteProject
#      description: |
#        Delete a specific project.
#      #      security:
#      #        - OAuth2: [admin]
#      parameters:
#        - in: path
#          name: uuid
#          description: 'the identifier of the project'
#          required: true
#          schema:
#            $ref: '#/components/schemas/Project/properties/uuid'
#      responses:
#        '200':
#          description: 'Ok; the project was successfully deleted'
#        '401':
#          description: 'Unauthorized; you must supply an authorization token'
#        '403':
#          description: 'Forbidden; insufficient permissions'
#        '404':
#          description: 'Not found; the project does not exist'
  /originators:
    get:
      tags:
        - originator
        - clientApi
      summary: Returns an overview of all originators
      operationId: getOriginators
      description: |
        Returns an overview of all originators the user has access to.
      #      security:
      #        - OAuth2: [read, admin]
      responses:
        '200':
          description: 'Ok; the body contains an array of originators'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Originator'
        '401':
          description: 'Unauthorized; you must supply an authorization token'
        '403':
          description: 'Forbidden; insufficient permissions'
    post:
      tags:
        - originator
        - clientApi
      summary: Create a originator
      operationId: postOriginators
      description: |
        Creates a originator.
      #      security:
      #        - OAuth2: [write]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Originator'
      responses:
        '200':
          description: 'Created; originator created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Originator'
        '400':
          description: 'Bad request; the originator contains invalid fields, the body describes which'
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: 'Unauthorized; you must supply an authorization token'
        '403':
          description: 'Forbidden; insufficient permissions'
  /originators/{uuid}:
    get:
      tags:
        - originator
        - clientApi
      summary: Returns a specific originator
      operationId: getOriginator
      description: |
        Returns information about a specific originator.
      #      security:
      #        - OAuth2: [read, admin]
      parameters:
        - in: path
          name: uuid
          description: 'the identifier of the originator'
          required: true
          schema:
            $ref: '#/components/schemas/Originator/properties/uuid'
      responses:
        '200':
          description: 'Ok; the body contains information about the originator'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Originator'
        '401':
          description: 'Unauthorized; you must supply an authorization token'
        '403':
          description: 'Forbidden; insufficient permissions'
        '404':
          description: 'Not found; the originator does not exist'
#    put:
#      tags:
#        - originator
#        - clientApi
#      summary: Create or replace information about a specific originator
#      operationId: putOriginator
#      description: |
#        Creates or replaces information of a specific originator.
#      #      security:
#      #        - OAuth2: [write, admin]
#      parameters:
#        - in: path
#          name: uuid
#          description: 'the identifier of the originator'
#          required: true
#          schema:
#            $ref: '#/components/schemas/Originator/properties/uuid'
#      requestBody:
#        required: true
#        content:
#          application/json:
#            schema:
#              $ref: '#/components/schemas/Originator'
#      responses:
#        '200':
#          description: 'Ok; the body contains the updated information about the originator'
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/Originator'
#        '400':
#          description: 'Bad request; the input is malformed or would invalidate required fields'
#          content:
#            text/plain:
#              schema:
#                type: string
#                description: 'The error message with the exact cause'
#        '401':
#          description: 'Unauthorized; you must supply an authorization token'
#        '403':
#          description: 'Forbidden; insufficient permissions'
#    patch:
#      tags:
#        - originator
#        - clientApi
#      summary: Upserts information about a specific originator
#      operationId: patchOriginator
#      description: |
#        Upserts information about a specific originator.
#      #      security:
#      #        - OAuth2: [write, admin]
#      parameters:
#        - in: path
#          name: uuid
#          description: 'the identifier of the originator'
#          required: true
#          schema:
#            $ref: '#/components/schemas/Originator/properties/uuid'
#      requestBody:
#        required: true
#        description: 'New fields will be inserted. Omitted fields will not be changed.'
#        content:
#          application/json:
#            schema:
#              $ref: '#/components/schemas/Originator'
#      responses:
#        '200':
#          description: 'Ok; the body contains the updated information about the originator'
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/Originator'
#        '400':
#          description: 'Bad request; the input is malformed or required fields have been invalidated'
#          content:
#            text/plain:
#              schema:
#                type: string
#                description: 'The error message with the exact cause'
#        '401':
#          description: 'Unauthorized; you must supply an authorization token'
#        '403':
#          description: 'Forbidden; insufficient permissions'
    delete:
      tags:
        - originator
        - clientApi
      summary: Delete a specific originator
      operationId: deleteOriginator
      description: |
        Delete a specific originator.
      #      security:
      #        - OAuth2: [admin]
      parameters:
        - in: path
          name: uuid
          description: 'the identifier of the originator'
          required: true
          schema:
            $ref: '#/components/schemas/Originator/properties/uuid'
      responses:
        '200':
          description: 'Ok; the originator was successfully deleted'
        '401':
          description: 'Unauthorized; you must supply an authorization token'
        '403':
          description: 'Forbidden; insufficient permissions'
        '404':
          description: 'Not found; the originator does not exist'
  /services:
    get:
      tags:
        - service
        - clientApi
      summary: Returns an overview of all services
      operationId: getServices
      description: |
        Returns an overview of all services the current user has access to.
#      security:
#        - OAuth2: [read, admin]
      responses:
        '200':
          description: 'Ok; the body contains links to the services'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Service'
        '401':
          description: 'Unauthorized; you must supply an authorization token'
        '403':
          description: 'Forbidden; insufficient permissions'
  /services/{uuid}:
    get:
      tags:
        - service
        - clientApi
      summary: Returns information about a specific service #TODO: Currently superfluous because the user receives all service info in GET /services
      operationId: getService
      description: |
        Returns information about a specific service.
#      security:
#        - OAuth2: [read]
      parameters:
        - in: path
          name: uuid
          description: 'the identifier of the service'
          required: true
          schema:
            $ref: '#/components/schemas/Service/properties/uuid'
      responses:
        '200':
          description: 'Ok; the body contains information about the service'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
        '401':
          description: 'Unauthorized; you must supply an authorization token'
        '403':
          description: 'Forbidden; insufficient permissions'
  /requests:
    get:
      tags:
        - request
        - clientApi
      summary: Returns an overview of all requests
      operationId: getRequests
      description: |
        Returns an overview of all submitted requests the current user has access to.
#      security:
#        - OAuth2: [read, admin]
      responses:
        '200':
          description: 'Ok; the body contains links to the requests'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Request'
        '401':
          description: 'Unauthorized; you must supply an authorization token'
        '403':
          description: 'Forbidden; insufficient permissions'
    post:
      tags:
        - request
        - clientApi
      summary: Create a request
      operationId: postRequest
      description: |
        Creates a request.
#      security:
#        - OAuth2: [write]
      requestBody:
        required: true
        description: Result and Status objects should be not passed
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Request'
      responses:
        '200':
          description: 'Created; request created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Request'
        '400':
          description: 'Bad request; the request contains invalid fields, the body describes which'
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: 'Unauthorized; you must supply an authorization token'
        '403':
          description: 'Forbidden; insufficient permissions'
  /requests/{uuid}:
    get:
      tags:
        - request
        - clientApi
      summary: Returns information about a specific request
      operationId: getRequest
      description: |
        Returns information about a specific request.
#      security:
#        - OAuth2: [read, admin]
      parameters:
        - in: path
          name: uuid
          description: 'the identifier of the request'
          required: true
          schema:
            $ref: '#/components/schemas/Request/properties/uuid'
      responses:
        '200':
          description: 'Ok; the body contains information about the request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Request'
        '401':
          description: 'Unauthorized; you must supply an authorization token'
        '403':
          description: 'Forbidden; insufficient permissions'
        '404':
          description: 'Not found; the request does not exist'
    delete:
      tags:
        - request
        - clientApi
      summary: Cancels a specific request
      operationId: deleteRequest
      description: |
        Cancels a specific request.
        # TODO: Implement cancellation instead of request deletion (for request and status tracking)
#      security:
#        - OAuth2: [write, admin]
      parameters:
        - in: path
          name: uuid
          description: 'the identifier of the request'
          required: true
          schema:
            $ref: '#/components/schemas/Request/properties/uuid'
      responses:
        '200':
          description: 'Ok; the request was deleted'
        '401':
          description: 'Unauthorized; you must supply an authorization token'
        '403':
          description: 'Forbidden; insufficient permissions'
        '404':
          description: 'Not found; the request does not exist'
  /requests/{uuid}/status:
    get:
      tags:
        - request
        - clientApi
      summary: Queries the status of a specific request
      operationId: getRequestStatus
      description: |
        Queries the status of a specific request.
#      security:
#        - OAuth2: [read, admin]
      parameters:
        - in: path
          name: uuid
          description: 'the identifier of the request'
          required: true
          schema:
            $ref: '#/components/schemas/Request/properties/uuid'
      responses:
        '200':
          description: 'Ok; the body contains the status of the request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestStatus'
        '401':
          description: 'Unauthorized; you must supply an authorization token'
        '403':
          description: 'Forbidden; insufficient permissions'
        '404':
          description: 'Not found; the request does not exist'
    patch:
      tags:
        - request
      summary: Upserts the status of a specific request
      operationId: patchRequestStatus
      description: |
        Upserts the status of a specific request.
#      security:
#        - OAuth2: [admin]
      parameters:
        - in: path
          name: uuid
          description: 'the identifier of the request'
          required: true
          schema:
            $ref: '#/components/schemas/Request/properties/uuid'
      responses:
        '200':
          description: 'Ok; status was created or updated'
        '401':
          description: 'Unauthorized; you must supply an authorization token'
        '403':
          description: 'Forbidden; insufficient permissions'

  /requests/{uuid}/result:
    get:
      tags:
        - request
        - clientApi
      summary: Get the processing result for a specific request
      operationId: getRequestResult
      description: |
        Get the processing result for a specific request.
#      security:
#        - OAuth2: [read, admin]
      parameters:
        - in: path
          name: uuid
          description: 'the identifier of the request'
          required: true
          schema:
            $ref: '#/components/schemas/Request/properties/uuid'
      responses:
        '200':
          description: 'Ok; the body contains the status of the request'
          content:
            application/json:
              schema:
                type: string
                example: 'TODO'
        '401':
          description: 'Unauthorized; you must supply an authorization token'
        '403':
          description: 'Forbidden; insufficient permissions'
        '404':
          description: 'Not found; the request does not exist'

  /files/{uuid}:
    get:
      tags:
        - file
        - clientApi
      summary: Returns a file
      operationId: getFile
      description: |
        Returns a binary stream representing a file.
      #      security:
      #        - OAuth2: [read, admin]
      parameters:
        - in: path
          name: uuid
          description: 'the identifier of the file'
          required: true
          schema:
            $ref: '#/components/schemas/Document/properties/fileUuid'
      responses:
        '200':
          description: 'Ok; the body contains the binary stream'
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '401':
          description: 'Unauthorized; you must supply an authorization token'
        '403':
          description: 'Forbidden; insufficient permissions'
        '404':
          description: 'Not found; the file does not exist'

components:
#  securitySchemes:
#    OAuth2:
#      type: oauth2
#      flows:
#        authorizationCode:
#          authorizationUrl: https://example.com/oauth/authorize
#          tokenUrl: https://example.com/oauth/token
#          scopes:
#            read: Grants read access
#            write: Grants read and write access
#            admin: Grants access to admin operations
  schemas:
    Uuid:
      type: string
      format: uuid
      example: '123e4567-e89b-12d3-a456-55664244'
      readOnly: true
    DateTime:
      type: string
      format: 'date-time'
      example: '2019-07-11T15:32:10.000Z'
    Status:
      type: string
      enum: ['AVAILABLE', 'DELETED']
      readOnly: true
    User:
      type: object
      required:
        - name
        - email
      properties:
        uuid:
          $ref: '#/components/schemas/Uuid'
        createdBy:
          $ref: '#/components/schemas/User'
        modifiedBy:
          $ref: '#/components/schemas/User'
        dateCreated:
          $ref: '#/components/schemas/DateTime'
        dateModified:
          $ref: '#/components/schemas/DateTime'
        name:
          type: string
          example: 'mamuster'
        status:
          $ref: '#/components/schemas/Status'
        email:
          type: string
          format: email
          example: 'max.mustermann@muster.de'
        fullName:
          type: string
          example: 'Max Mustermann'
    Document:
      type: object
      required:
        - name
      properties:
        uuid:
          $ref: '#/components/schemas/Uuid'
        createdBy:
          $ref: '#/components/schemas/User'
        modifiedBy:
          $ref: '#/components/schemas/User'
        dateCreated:
          $ref: '#/components/schemas/DateTime'
        dateModified:
          $ref: '#/components/schemas/DateTime'
        name:
          type: string
          example: 'myfile.txt'
        status:
          $ref: '#/components/schemas/Status'
        encodingFormat:
          type: string
          example: 'text/plain'
          readOnly: true
        domainUuid:
          $ref: '#/components/schemas/Domain/properties/uuid'
        fileUuid:
          $ref: '#/components/schemas/Uuid'
    Domain:
      type: object
      required:
        - name
      properties:
        uuid:
          $ref: '#/components/schemas/Uuid'
        createdBy:
          $ref: '#/components/schemas/User'
        modifiedBy:
          $ref: '#/components/schemas/User'
        dateCreated:
          $ref: '#/components/schemas/DateTime'
        dateModified:
          $ref: '#/components/schemas/DateTime'
        name:
          type: string
          example: 'kybeidos_docs'
        status:
          $ref: '#/components/schemas/Status'
        documentUuids:
          type: array
          items:
            $ref: '#/components/schemas/Document/properties/uuid'
        originatorUuid:
          $ref: '#/components/schemas/Originator/properties/uuid'
        projectUuid:
          $ref: '#/components/schemas/Project/properties/uuid'
    Originator:
      type: object
      required:
        - name
      properties:
        uuid:
          $ref: '#/components/schemas/Uuid'
        createdBy:
          $ref: '#/components/schemas/User'
        modifiedBy:
          $ref: '#/components/schemas/User'
        dateCreated:
          $ref: '#/components/schemas/DateTime'
        dateModified:
          $ref: '#/components/schemas/DateTime'
        name:
          type: string
          example: 'Kybeidos'
        status:
          $ref: '#/components/schemas/Status'
        domainUuid:
          $ref: '#/components/schemas/Domain/properties/uuid'
        geolocation:
          type: array
          items:
            type: double
          minItems: 2
          maxItems: 2
          example: [51.507351, -0.127758]
    Project:
      type: object
      required:
        - name
      properties:
        uuid:
          $ref: '#/components/schemas/Uuid'
        createdBy:
          $ref: '#/components/schemas/User'
        modifiedBy:
          $ref: '#/components/schemas/User'
        dateCreated:
          $ref: '#/components/schemas/DateTime'
        dateModified:
          $ref: '#/components/schemas/DateTime'
        name:
          type: string
          example: 'Kybeidos & friends'
        status:
          $ref: '#/components/schemas/Status'
        domains:
          type: array
          items:
            $ref: '#/components/schemas/Domain'
    Service:
      type: object
      readOnly: true
      required:
        - name
        - code
        - serviceType
        - supportedMimeTypes
        - parameters
      properties:
        uuid:
          $ref: '#/components/schemas/Uuid'
        createdBy:
          $ref: '#/components/schemas/User'
        modifiedBy:
          $ref: '#/components/schemas/User'
        dateCreated:
          $ref: '#/components/schemas/DateTime'
        dateModified:
          $ref: '#/components/schemas/DateTime'
        name:
          type: string
          example: 'LSA Summarization'
        status:
          $ref: '#/components/schemas/Status'
        code:
          type: string
          example: 'SUMMARIZATLSA'
        description:
          type: string
          example: 'Creates a summarization using Latent Semantic Analysis'
        serviceType:
          type: string
          example: 'Summariziation'
        supportedMimeTypes:
          type: array
          items:
            type: string
            example: ["text/plain", "application/json"]
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/ServiceParameterDescription'
    ServiceParameterDescription:
      type: object
      readOnly: true
      required:
        - name
        - type
      properties:
        name:
          type: string
          example: 'numSentences'
        description:
          type: string
          example: 'Controls the maximum number of sentences the summarization should consist of'
        type:
          type: string
          example: 'Integer'
        constraints:
          type: array
          example: ['>0', '<1000']
          items:
            type: string
        displayInUI:
          type: boolean
    ServiceParameterValue:
      type: object
      required:
        - name
        - values
      properties:
        name:
          type: string
          example: 'numSentences'
        values:
          type: array
          example: ['10']
          items:
            type: string
    Request:
      type: object
      required:
        - serviceCode
        - parameters
        - documentIds
      properties:
        uuid:
          $ref: '#/components/schemas/Uuid'
        createdBy:
          $ref: '#/components/schemas/User'
        modifiedBy:
          $ref: '#/components/schemas/User'
        dateCreated:
          $ref: '#/components/schemas/DateTime'
        dateModified:
          $ref: '#/components/schemas/DateTime'
        name:
          type: string
          example: 'Kybeidos'
        status:
          $ref: '#/components/schemas/Status'
        serviceCode:
          $ref: '#/components/schemas/Service/properties/code'
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/ServiceParameterValue'
        documentUuids:
          type: array
          items:
            $ref: '#/components/schemas/Document/properties/uuid'
        requestStatus:
          $ref: '#/components/schemas/RequestStatus'
        requestResults:
          type: array
          readOnly: true
          items:
            $ref: '#/components/schemas/RequestResult'
    RequestStatus:
      type: object
      readOnly: true
      required:
        - dateCreated
        - dateModified
        - statusCode
        - statusMessage
      properties:
        dateCreated:
          $ref: '#/components/schemas/DateTime'
        dateModified:
          $ref: '#/components/schemas/DateTime'
        statusCode:
          type: string
          enum:
            - SCHEDULED
            - RUNNING
            - SUCCEEDED
            - FAILED
        statusMessage:
          type: string
    RequestResult:
      type: object
      readOnly: true
      properties:
        dateCreated:
          $ref: '#/components/schemas/DateTime'
        dateModified:
          $ref: '#/components/schemas/DateTime'
        results:
          type: array
          items:
            $ref: '#/components/schemas/RequestItem'
    RequestItem:
      type: object
      readOnly: true
      properties:
        dateCreated:
          $ref: '#/components/schemas/DateTime'
        dateModified:
          $ref: '#/components/schemas/DateTime'
        name:
          type: string
        description:
          type: string
        encodingFormat:
          type: string
        url:
          type: string
        type:
          type: string
    File:
      type: string
      format: binary
      readOnly: true
